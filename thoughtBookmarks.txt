Notes:


if there are too many opperands then just ignore the unnecessary operands but if there are too few there must be an error



//part 7
Provided the initial grammar structure in bison file
can Return Lambda token from lexx

//todo
Need to think about how arguments/variables/Lambdas will be assigned and evaluated
Consider changing when you round numbers to during evaluation
	consider taking the entire body of the function and using a copy of it at each level of the recursion
	think about it in the same way that you solve let list elements

//KNOWN ERRORS

//////
//ask professor what expected function of read is
	-Does 



//test cases
//format: 
//       input // expected output

(add 1 2 3 4) //10
(sub 4 3) // 1
(sub 4 3 11) //-10
(div 27 3 3) //3
(mult 3 3 3) //27
(remainder 100 51 6) //49
(log 2 8) // 3
(log 2 8 5) // 3
(pow 3 2) //9
(max 2 3) //3
(min 3 2) // 2
(print 3 4 5 6 7) //print sequentially on seperate lines and returns the final print number which is 7
(rand) //produces an unrestricted pseudorandom number (need to fix. It seems bounded)!!!!!!!!!
(cond (smaller 3 4) (print 9 10) (print -9 -10)) //prints 9 and 10 and returns result of conditional expression
(add ((let (abcd 1)) (sub 3 abcd)) 4) //6
(mult ((let (a 1) (b 2)) (add a b)) (sqrt 2)) //4.24642
(add ((let (a ((let (b 2)) (mult b (sqrt 10))))) (div a 2)) ((let (c 5)) (sqrt c))) //5.398345
((let (first (sub 5 1)) (second 2)) (add (pow 2 first) (sqrt second))) 
((let (real a ((let (real c 3) (integer d 4)) (mult c d)))) (sqrt a))
((let (fard lambda (x y) (add x y))) (fard 1 2)) //3
((let (a 1) (f lambda (x y) (add x y)))(f 1 (f 2 a))) // 4
((let (f lambda (x y) (add x y))) (f (sub 5 2) (mult 2 3))) //9
((let (f lambda (x y) (add x y))) (f (f 5 2 2) (mult 2 3))) //13

((let (real myFunc lambda (x y) (mult (add x 5) (sub y 2)))) (sub (myFunc 3 5) 2)))




-------------------------------------------------------------------------------------------------------------
The following grammar expands the capability of ciLisp by adding support for user-defined functions:

program ::= s-expr EOL

s-expr ::= 
     quit 
   | number 
   | symbol 
   | ( func s_expr_list )
   | ( scope s_expr )
   | ( cond s_expr s_expr s_expr )

func ::=
    neg|abs|exp|sqrt|add|sub|mult|div|remainder|log|pow|max|min|exp2
    |cbrt|hypot|rand|read|print|equal|smaller|larger

scope ::= <empty> | ( let let_list )

let_list ::= let_elem | let_list let_elem 

let_elem ::= 
   ( type symbol s_expr )
   | ( type symbol lambda ( arg_list ) s_expr )

type ::= <empty> | integer | real

arg_list ::= symbol arg_list | symbol

number ::= digit+ [ . digit+ ] 
symbol ::= letter+ 

letter ::= [a-zA-Z]
digit ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

Function definitions should be placed in the let section. A function should have have a positive number of formal arguments (symbols). The body of the function is an expression that may use formal parameters. For example:

((let (real myFunc lambda (x y) (mult (add x 5) (sub y 2)))) (sub (myFunc 3 5) 2))

Similarly to the use of let and cond, the lambda keyword should be used just for parsing.

As shown, a function must be called with the number of actual parameters that comply with the arity rules described in the previous task for lists of function parameters. The same erros and warnings should be issues as needed.

The value of the expression that is the body of the function is the value that the function returns.

Formal parameters have type ARG_TYPE and have NULL as values. For example, in the tree for

(((lambda f (x y) (add x y)))(f (sub 5 2) (mult 2 3))

x and y are symbols in the scope of add with type ARG_TYPE, and with x.val=NULL and y.val=NULL. When the evaluator processes (f 1 2), this function will set the x.val to root of the tree for (sub 5 2) and y.val to the root of the tree for (mult 2 3); that is equivalent to pushing the actual parameters (pointers to the roots) on a stack. After the substitutions, both formal parameters have individual stacks with the pointers to the roots of the corresponding s-expression trees, so (add x y) can be evaluated. After the evaluation, the pointers x.val and y.val are set back to NULL. This is like popping up the parameters from the stack.

This task needs some modifications and extra definitions to the list of symbols in a scope:

typedef enum { VARIABLE_TYPE, LAMBDA_TYPE, ARG_TYPE } SYMBOL_TYPE;

typedef struct symbol_table_node {
   SYMBOL_TYPE type;
   DATA_TYPE val_type;
   char *ident;
   struct ast_node *val;
   struct symbol_table_node *next;
} SYMBOL_TABLE_NODE;