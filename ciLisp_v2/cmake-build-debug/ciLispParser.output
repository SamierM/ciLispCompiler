State 4 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: s_expr EOL

    2 s_expr: QUIT
    3       | NUMBER
    4       | SYMBOL
    5       | LPAREN FUNC s_expr_list RPAREN
    6       | LPAREN scope s_expr RPAREN
    7       | LPAREN CONDITIONAL s_expr s_expr s_expr RPAREN
    8       | error

    9 s_expr_list: s_expr
   10            | s_expr s_expr_list

   11 scope: %empty
   12      | LPAREN LET let_list RPAREN

   13 let_list: let_elem
   14         | let_list let_elem

   15 let_elem: LPAREN type SYMBOL s_expr RPAREN
   16         | LPAREN type SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN

   17 arg_list: SYMBOL arg_list
   18         | SYMBOL

   19 type: INTEGER
   20     | REAL
   21     | %empty


Terminals, with rules where they appear

$end (0) 0
error (256) 8
FUNC (258) 5
SYMBOL (259) 4 15 16 17 18
NUMBER (260) 3
INTEGER (261) 19
REAL (262) 20
LPAREN (263) 5 6 7 12 15 16
RPAREN (264) 5 6 7 12 15 16
EOL (265) 1
QUIT (266) 2
LET (267) 12
CONDITIONAL (268) 7
LAMBDA (269) 16


Nonterminals, with rules where they appear

$accept (15)
    on left: 0
program (16)
    on left: 1, on right: 0
s_expr (17)
    on left: 2 3 4 5 6 7 8, on right: 1 6 7 9 10 15 16
s_expr_list (18)
    on left: 9 10, on right: 5 10
scope (19)
    on left: 11 12, on right: 6
let_list (20)
    on left: 13 14, on right: 12 14
let_elem (21)
    on left: 15 16, on right: 13 14
arg_list (22)
    on left: 17 18, on right: 16 17
type (23)
    on left: 19 20 21, on right: 15 16


State 0

    0 $accept: . program $end

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    NUMBER  shift, and go to state 3
    LPAREN  shift, and go to state 4
    QUIT    shift, and go to state 5

    program  go to state 6
    s_expr   go to state 7


State 1

    8 s_expr: error .

    $default  reduce using rule 8 (s_expr)


State 2

    4 s_expr: SYMBOL .

    $default  reduce using rule 4 (s_expr)


State 3

    3 s_expr: NUMBER .

    $default  reduce using rule 3 (s_expr)


State 4

    5 s_expr: LPAREN . FUNC s_expr_list RPAREN
    6       | LPAREN . scope s_expr RPAREN
    7       | LPAREN . CONDITIONAL s_expr s_expr s_expr RPAREN

    FUNC         shift, and go to state 8
    LPAREN       shift, and go to state 9
    CONDITIONAL  shift, and go to state 10

    LPAREN    [reduce using rule 11 (scope)]
    $default  reduce using rule 11 (scope)

    scope  go to state 11


State 5

    2 s_expr: QUIT .

    $default  reduce using rule 2 (s_expr)


State 6

    0 $accept: program . $end

    $end  shift, and go to state 12


State 7

    1 program: s_expr . EOL

    EOL  shift, and go to state 13


State 8

    5 s_expr: LPAREN FUNC . s_expr_list RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    NUMBER  shift, and go to state 3
    LPAREN  shift, and go to state 4
    QUIT    shift, and go to state 5

    s_expr       go to state 14
    s_expr_list  go to state 15


State 9

   12 scope: LPAREN . LET let_list RPAREN

    LET  shift, and go to state 16


State 10

    7 s_expr: LPAREN CONDITIONAL . s_expr s_expr s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    NUMBER  shift, and go to state 3
    LPAREN  shift, and go to state 4
    QUIT    shift, and go to state 5

    s_expr  go to state 17


State 11

    6 s_expr: LPAREN scope . s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    NUMBER  shift, and go to state 3
    LPAREN  shift, and go to state 4
    QUIT    shift, and go to state 5

    s_expr  go to state 18


State 12

    0 $accept: program $end .

    $default  accept


State 13

    1 program: s_expr EOL .

    $default  reduce using rule 1 (program)


State 14

    9 s_expr_list: s_expr .
   10            | s_expr . s_expr_list

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    NUMBER  shift, and go to state 3
    LPAREN  shift, and go to state 4
    QUIT    shift, and go to state 5

    RPAREN  reduce using rule 9 (s_expr_list)

    s_expr       go to state 14
    s_expr_list  go to state 19


State 15

    5 s_expr: LPAREN FUNC s_expr_list . RPAREN

    RPAREN  shift, and go to state 20


State 16

   12 scope: LPAREN LET . let_list RPAREN

    LPAREN  shift, and go to state 21

    let_list  go to state 22
    let_elem  go to state 23


State 17

    7 s_expr: LPAREN CONDITIONAL s_expr . s_expr s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    NUMBER  shift, and go to state 3
    LPAREN  shift, and go to state 4
    QUIT    shift, and go to state 5

    s_expr  go to state 24


State 18

    6 s_expr: LPAREN scope s_expr . RPAREN

    RPAREN  shift, and go to state 25


State 19

   10 s_expr_list: s_expr s_expr_list .

    $default  reduce using rule 10 (s_expr_list)


State 20

    5 s_expr: LPAREN FUNC s_expr_list RPAREN .

    $default  reduce using rule 5 (s_expr)


State 21

   15 let_elem: LPAREN . type SYMBOL s_expr RPAREN
   16         | LPAREN . type SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN

    INTEGER  shift, and go to state 26
    REAL     shift, and go to state 27

    $default  reduce using rule 21 (type)

    type  go to state 28


State 22

   12 scope: LPAREN LET let_list . RPAREN
   14 let_list: let_list . let_elem

    LPAREN  shift, and go to state 21
    RPAREN  shift, and go to state 29

    let_elem  go to state 30


State 23

   13 let_list: let_elem .

    $default  reduce using rule 13 (let_list)


State 24

    7 s_expr: LPAREN CONDITIONAL s_expr s_expr . s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    NUMBER  shift, and go to state 3
    LPAREN  shift, and go to state 4
    QUIT    shift, and go to state 5

    s_expr  go to state 31


State 25

    6 s_expr: LPAREN scope s_expr RPAREN .

    $default  reduce using rule 6 (s_expr)


State 26

   19 type: INTEGER .

    $default  reduce using rule 19 (type)


State 27

   20 type: REAL .

    $default  reduce using rule 20 (type)


State 28

   15 let_elem: LPAREN type . SYMBOL s_expr RPAREN
   16         | LPAREN type . SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN

    SYMBOL  shift, and go to state 32


State 29

   12 scope: LPAREN LET let_list RPAREN .

    $default  reduce using rule 12 (scope)


State 30

   14 let_list: let_list let_elem .

    $default  reduce using rule 14 (let_list)


State 31

    7 s_expr: LPAREN CONDITIONAL s_expr s_expr s_expr . RPAREN

    RPAREN  shift, and go to state 33


State 32

   15 let_elem: LPAREN type SYMBOL . s_expr RPAREN
   16         | LPAREN type SYMBOL . LAMBDA LPAREN arg_list RPAREN s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    NUMBER  shift, and go to state 3
    LPAREN  shift, and go to state 4
    QUIT    shift, and go to state 5
    LAMBDA  shift, and go to state 34

    s_expr  go to state 35


State 33

    7 s_expr: LPAREN CONDITIONAL s_expr s_expr s_expr RPAREN .

    $default  reduce using rule 7 (s_expr)


State 34

   16 let_elem: LPAREN type SYMBOL LAMBDA . LPAREN arg_list RPAREN s_expr RPAREN

    LPAREN  shift, and go to state 36


State 35

   15 let_elem: LPAREN type SYMBOL s_expr . RPAREN

    RPAREN  shift, and go to state 37


State 36

   16 let_elem: LPAREN type SYMBOL LAMBDA LPAREN . arg_list RPAREN s_expr RPAREN

    SYMBOL  shift, and go to state 38

    arg_list  go to state 39


State 37

   15 let_elem: LPAREN type SYMBOL s_expr RPAREN .

    $default  reduce using rule 15 (let_elem)


State 38

   17 arg_list: SYMBOL . arg_list
   18         | SYMBOL .

    SYMBOL  shift, and go to state 38

    $default  reduce using rule 18 (arg_list)

    arg_list  go to state 40


State 39

   16 let_elem: LPAREN type SYMBOL LAMBDA LPAREN arg_list . RPAREN s_expr RPAREN

    RPAREN  shift, and go to state 41


State 40

   17 arg_list: SYMBOL arg_list .

    $default  reduce using rule 17 (arg_list)


State 41

   16 let_elem: LPAREN type SYMBOL LAMBDA LPAREN arg_list RPAREN . s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    NUMBER  shift, and go to state 3
    LPAREN  shift, and go to state 4
    QUIT    shift, and go to state 5

    s_expr  go to state 42


State 42

   16 let_elem: LPAREN type SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr . RPAREN

    RPAREN  shift, and go to state 43


State 43

   16 let_elem: LPAREN type SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN .

    $default  reduce using rule 16 (let_elem)
