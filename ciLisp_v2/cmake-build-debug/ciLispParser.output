State 4 conflicts: 2 shift/reduce


Grammar

    0 $accept: program $end

    1 program: s_expr EOL

    2 s_expr: QUIT
    3       | NUMBER
    4       | SYMBOL
    5       | LPAREN FUNC s_expr_list RPAREN
    6       | LPAREN scope s_expr RPAREN
    7       | LPAREN CONDITIONAL s_expr s_expr s_expr RPAREN
    8       | LPAREN SYMBOL s_expr_list RPAREN
    9       | error

   10 s_expr_list: s_expr
   11            | s_expr s_expr_list

   12 scope: %empty
   13      | LPAREN LET let_list RPAREN

   14 let_list: let_elem
   15         | let_list let_elem

   16 let_elem: LPAREN type SYMBOL s_expr RPAREN
   17         | LPAREN type SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN

   18 arg_list: SYMBOL arg_list
   19         | SYMBOL

   20 type: INTEGER
   21     | REAL
   22     | %empty


Terminals, with rules where they appear

$end (0) 0
error (256) 9
FUNC (258) 5
SYMBOL (259) 4 8 16 17 18 19
NUMBER (260) 3
INTEGER (261) 20
REAL (262) 21
LPAREN (263) 5 6 7 8 13 16 17
RPAREN (264) 5 6 7 8 13 16 17
EOL (265) 1
QUIT (266) 2
LET (267) 13
CONDITIONAL (268) 7
LAMBDA (269) 17


Nonterminals, with rules where they appear

$accept (15)
    on left: 0
program (16)
    on left: 1, on right: 0
s_expr (17)
    on left: 2 3 4 5 6 7 8 9, on right: 1 6 7 10 11 16 17
s_expr_list (18)
    on left: 10 11, on right: 5 8 11
scope (19)
    on left: 12 13, on right: 6
let_list (20)
    on left: 14 15, on right: 13 15
let_elem (21)
    on left: 16 17, on right: 14 15
arg_list (22)
    on left: 18 19, on right: 17 18
type (23)
    on left: 20 21 22, on right: 16 17


State 0

    0 $accept: . program $end

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    NUMBER  shift, and go to state 3
    LPAREN  shift, and go to state 4
    QUIT    shift, and go to state 5

    program  go to state 6
    s_expr   go to state 7


State 1

    9 s_expr: error .

    $default  reduce using rule 9 (s_expr)


State 2

    4 s_expr: SYMBOL .

    $default  reduce using rule 4 (s_expr)


State 3

    3 s_expr: NUMBER .

    $default  reduce using rule 3 (s_expr)


State 4

    5 s_expr: LPAREN . FUNC s_expr_list RPAREN
    6       | LPAREN . scope s_expr RPAREN
    7       | LPAREN . CONDITIONAL s_expr s_expr s_expr RPAREN
    8       | LPAREN . SYMBOL s_expr_list RPAREN

    FUNC         shift, and go to state 8
    SYMBOL       shift, and go to state 9
    LPAREN       shift, and go to state 10
    CONDITIONAL  shift, and go to state 11

    SYMBOL    [reduce using rule 12 (scope)]
    LPAREN    [reduce using rule 12 (scope)]
    $default  reduce using rule 12 (scope)

    scope  go to state 12


State 5

    2 s_expr: QUIT .

    $default  reduce using rule 2 (s_expr)


State 6

    0 $accept: program . $end

    $end  shift, and go to state 13


State 7

    1 program: s_expr . EOL

    EOL  shift, and go to state 14


State 8

    5 s_expr: LPAREN FUNC . s_expr_list RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    NUMBER  shift, and go to state 3
    LPAREN  shift, and go to state 4
    QUIT    shift, and go to state 5

    s_expr       go to state 15
    s_expr_list  go to state 16


State 9

    8 s_expr: LPAREN SYMBOL . s_expr_list RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    NUMBER  shift, and go to state 3
    LPAREN  shift, and go to state 4
    QUIT    shift, and go to state 5

    s_expr       go to state 15
    s_expr_list  go to state 17


State 10

   13 scope: LPAREN . LET let_list RPAREN

    LET  shift, and go to state 18


State 11

    7 s_expr: LPAREN CONDITIONAL . s_expr s_expr s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    NUMBER  shift, and go to state 3
    LPAREN  shift, and go to state 4
    QUIT    shift, and go to state 5

    s_expr  go to state 19


State 12

    6 s_expr: LPAREN scope . s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    NUMBER  shift, and go to state 3
    LPAREN  shift, and go to state 4
    QUIT    shift, and go to state 5

    s_expr  go to state 20


State 13

    0 $accept: program $end .

    $default  accept


State 14

    1 program: s_expr EOL .

    $default  reduce using rule 1 (program)


State 15

   10 s_expr_list: s_expr .
   11            | s_expr . s_expr_list

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    NUMBER  shift, and go to state 3
    LPAREN  shift, and go to state 4
    QUIT    shift, and go to state 5

    RPAREN  reduce using rule 10 (s_expr_list)

    s_expr       go to state 15
    s_expr_list  go to state 21


State 16

    5 s_expr: LPAREN FUNC s_expr_list . RPAREN

    RPAREN  shift, and go to state 22


State 17

    8 s_expr: LPAREN SYMBOL s_expr_list . RPAREN

    RPAREN  shift, and go to state 23


State 18

   13 scope: LPAREN LET . let_list RPAREN

    LPAREN  shift, and go to state 24

    let_list  go to state 25
    let_elem  go to state 26


State 19

    7 s_expr: LPAREN CONDITIONAL s_expr . s_expr s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    NUMBER  shift, and go to state 3
    LPAREN  shift, and go to state 4
    QUIT    shift, and go to state 5

    s_expr  go to state 27


State 20

    6 s_expr: LPAREN scope s_expr . RPAREN

    RPAREN  shift, and go to state 28


State 21

   11 s_expr_list: s_expr s_expr_list .

    $default  reduce using rule 11 (s_expr_list)


State 22

    5 s_expr: LPAREN FUNC s_expr_list RPAREN .

    $default  reduce using rule 5 (s_expr)


State 23

    8 s_expr: LPAREN SYMBOL s_expr_list RPAREN .

    $default  reduce using rule 8 (s_expr)


State 24

   16 let_elem: LPAREN . type SYMBOL s_expr RPAREN
   17         | LPAREN . type SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN

    INTEGER  shift, and go to state 29
    REAL     shift, and go to state 30

    $default  reduce using rule 22 (type)

    type  go to state 31


State 25

   13 scope: LPAREN LET let_list . RPAREN
   15 let_list: let_list . let_elem

    LPAREN  shift, and go to state 24
    RPAREN  shift, and go to state 32

    let_elem  go to state 33


State 26

   14 let_list: let_elem .

    $default  reduce using rule 14 (let_list)


State 27

    7 s_expr: LPAREN CONDITIONAL s_expr s_expr . s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    NUMBER  shift, and go to state 3
    LPAREN  shift, and go to state 4
    QUIT    shift, and go to state 5

    s_expr  go to state 34


State 28

    6 s_expr: LPAREN scope s_expr RPAREN .

    $default  reduce using rule 6 (s_expr)


State 29

   20 type: INTEGER .

    $default  reduce using rule 20 (type)


State 30

   21 type: REAL .

    $default  reduce using rule 21 (type)


State 31

   16 let_elem: LPAREN type . SYMBOL s_expr RPAREN
   17         | LPAREN type . SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN

    SYMBOL  shift, and go to state 35


State 32

   13 scope: LPAREN LET let_list RPAREN .

    $default  reduce using rule 13 (scope)


State 33

   15 let_list: let_list let_elem .

    $default  reduce using rule 15 (let_list)


State 34

    7 s_expr: LPAREN CONDITIONAL s_expr s_expr s_expr . RPAREN

    RPAREN  shift, and go to state 36


State 35

   16 let_elem: LPAREN type SYMBOL . s_expr RPAREN
   17         | LPAREN type SYMBOL . LAMBDA LPAREN arg_list RPAREN s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    NUMBER  shift, and go to state 3
    LPAREN  shift, and go to state 4
    QUIT    shift, and go to state 5
    LAMBDA  shift, and go to state 37

    s_expr  go to state 38


State 36

    7 s_expr: LPAREN CONDITIONAL s_expr s_expr s_expr RPAREN .

    $default  reduce using rule 7 (s_expr)


State 37

   17 let_elem: LPAREN type SYMBOL LAMBDA . LPAREN arg_list RPAREN s_expr RPAREN

    LPAREN  shift, and go to state 39


State 38

   16 let_elem: LPAREN type SYMBOL s_expr . RPAREN

    RPAREN  shift, and go to state 40


State 39

   17 let_elem: LPAREN type SYMBOL LAMBDA LPAREN . arg_list RPAREN s_expr RPAREN

    SYMBOL  shift, and go to state 41

    arg_list  go to state 42


State 40

   16 let_elem: LPAREN type SYMBOL s_expr RPAREN .

    $default  reduce using rule 16 (let_elem)


State 41

   18 arg_list: SYMBOL . arg_list
   19         | SYMBOL .

    SYMBOL  shift, and go to state 41

    $default  reduce using rule 19 (arg_list)

    arg_list  go to state 43


State 42

   17 let_elem: LPAREN type SYMBOL LAMBDA LPAREN arg_list . RPAREN s_expr RPAREN

    RPAREN  shift, and go to state 44


State 43

   18 arg_list: SYMBOL arg_list .

    $default  reduce using rule 18 (arg_list)


State 44

   17 let_elem: LPAREN type SYMBOL LAMBDA LPAREN arg_list RPAREN . s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    NUMBER  shift, and go to state 3
    LPAREN  shift, and go to state 4
    QUIT    shift, and go to state 5

    s_expr  go to state 45


State 45

   17 let_elem: LPAREN type SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr . RPAREN

    RPAREN  shift, and go to state 46


State 46

   17 let_elem: LPAREN type SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN .

    $default  reduce using rule 17 (let_elem)
